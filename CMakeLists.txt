PROJECT(FullMonte)
CMAKE_MINIMUM_REQUIRED(VERSION 3.1)

CONFIGURE_FILE(tclmonte.in ${CMAKE_CURRENT_SOURCE_DIR}/tclmonte.sh)
FILE(COPY tclmonte.sh DESTINATION ${CMAKE_BINARY_DIR}/bin FILE_PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ OWNER_EXECUTE GROUP_EXECUTE WORLD_EXECUTE)

CONFIGURE_FILE(tclvtk.sh.in ${CMAKE_CURRENT_SOURCE_DIR}/tclvtk.sh)
FILE(COPY tclvtk.sh DESTINATION ${CMAKE_BINARY_DIR}/bin FILE_PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ OWNER_EXECUTE GROUP_EXECUTE WORLD_EXECUTE)

CONFIGURE_FILE(tclvtk.sh.install.in ${CMAKE_CURRENT_SOURCE_DIR}/tclvtk.sh.install)
INSTALL(PROGRAMS tclvtk.sh.install
    DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
    RENAME tclvtk.sh)

CONFIGURE_FILE(testdata.h.in testdata.h)
CONFIGURE_FILE(config.h.in   config.h)
CONFIGURE_FILE(FullMonteSWConfig.cmake.in FullMonteSWConfig.cmake)
INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR})

SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_EXECUTABLE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

## Compiler setup
SET(CMAKE_CXX_STANDARD 11)

### Architecture
SET(ARCH avx2 CACHE STRING "Architecture flag for -m option")

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-missing-braces")

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")

MESSAGE("Arch: ${ARCH}")

## Require .so extension (Mac likes to make it .dylib, causing a lot of the TCL scripts to bomb)

IF(APPLE)
    SET(CMAKE_SHARED_LIBRARY_SUFFIX ".so")
ENDIF()

IF("${ARCH}" STREQUAL "avx2")
    ADD_DEFINITIONS(-DUSE_AVX2 -DHAVE_AVX2)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx2 -msse4.1")
ELSEIF("${ARCH}" STREQUAL "avx")
    ADD_DEFINITIONS(-DUSE_AVX -DHAVE_AVX)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx -msse4.1")
ENDIF()

### Warnings and esoteric settings
IF(${CMAKE_CXX_COMPILER_ID} MATCHES "GNU")
    # Required to avoid an error in colliding mangled names
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fabi-version=6")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-psabi")
ELSEIF(${CMAKE_CXX_COMPILER_ID} MATCHES "CLANG")
    # Required to avoid all kinds of (harmless) warnings due to Boost concept checks
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-local-typedef")
ENDIF()


MESSAGE("Compiler ID: '${CMAKE_CXX_COMPILER_ID}' with flags '${CMAKE_CXX_FLAGS}'")

GET_DIRECTORY_PROPERTY(DPROPS COMPILE_DEFINITIONS)
MESSAGE("Compile_definitions: ${DPROPS}")

## Include dirs for FullMonte
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/..)



## Wrapping options
OPTION(WRAP_TCL ON)
OPTION(WRAP_VTK ON)

IF(WRAP_TCL)
    FIND_PACKAGE(SWIG REQUIRED)
    INCLUDE(${SWIG_USE_FILE})
    
    SET(CMAKE_SWIG_FLAGS ${CMAKE_SWIG_FLAGS} -Wall)

	FIND_PACKAGE(TCL REQUIRED)
	INCLUDE_DIRECTORIES(${TCL_INCLUDE_PATH})
	
	## TCL stubs screws up the VTK TCL bindings
    #FIND_PACKAGE(TclStub REQUIRED)
    #ADD_DEFINITIONS(-DUSE_TCL_STUBS)
ENDIF()


## Boost required components
FIND_PACKAGE(Boost 1.58.0 REQUIRED COMPONENTS unit_test_framework serialization system program_options timer)

INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})

SET(TEST_THREAD_COUNT 8 CACHE STRING "Number of threads for test cases")

IF (WRAP_VTK)
	FIND_PACKAGE(VTK REQUIRED)
	INCLUDE(${VTK_USE_FILE})
	ADD_SUBDIRECTORY(VTK)
ENDIF()

ADD_SUBDIRECTORY(SFMT)
ADD_SUBDIRECTORY(Geometry)
ADD_SUBDIRECTORY(Storage)
ADD_SUBDIRECTORY(Kernels)
ADD_SUBDIRECTORY(OutputTypes)
ADD_SUBDIRECTORY(Queries)
